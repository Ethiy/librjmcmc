<?xml version="1.0" standalone="yes"?>
<library-reference id="geometry"><title>Geometry</title><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/bbox.hpp"/><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Circle_2.h"><namespace name="geometry"><class name="Circle_2"><template>
      <template-type-parameter name="K_"/>
    </template><typedef name="K"><type>K_</type></typedef><typedef name="RT"><type>K::RT</type></typedef><typedef name="FT"><type>K::FT</type></typedef><typedef name="Point_2"><type>K::Point_2</type></typedef><typedef name="Vector_2"><type>K::Vector_2</type></typedef><typedef name="Line_2"><type>K::Line_2</type></typedef><typedef name="Self"><type>Circle_2</type></typedef><method-group name="public member functions"><method name="center" cv="const"><type>Point_2</type></method><method name="is_degenerate" cv="const"><type>bool</type></method><method name="radius" cv="const"><type>FT</type></method><method name="squared_radius" cv="const"><type>FT</type></method></method-group><constructor/><constructor><parameter name="center"><paramtype>const Point_2 &amp;</paramtype></parameter><parameter name="radius"><paramtype>double</paramtype></parameter></constructor></class><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="c"><paramtype>const Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="operator&gt;&gt;"><type>std::istream &amp;</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="is"><paramtype>std::istream &amp;</paramtype></parameter><parameter name="b"><paramtype>Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="radius"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="perimeter"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="area"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const Circle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Circle_2_image_error.h"><struct name="Circle_2_image_error_functor"><typedef name="result_type"><type>double</type></typedef><data-member name="r"><type>double</type></data-member><data-member name="x"><type>double</type></data-member><data-member name="y"><type>double</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>result_type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>const T &amp;</paramtype></parameter></method></method-group><constructor><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="x0"><paramtype>int</paramtype></parameter><parameter name="y0"><paramtype>int</paramtype></parameter></constructor></struct><function name="apply_operation"><type>F::result_type</type><template>
          <template-type-parameter name="V"/>
          <template-type-parameter name="F"/>
        </template><parameter name="v"><paramtype>const V &amp;</paramtype></parameter><parameter name="f"><paramtype>const F &amp;</paramtype></parameter></function><function name="apply_operation"><type>F::result_type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="F"/>
        </template><parameter name="v"><paramtype>const boost::gil::any_image_view&lt; T &gt; &amp;</paramtype></parameter><parameter name="f"><paramtype>const F &amp;</paramtype></parameter></function><function name="image_error"><type>double</type><template>
          <template-type-parameter name="OrientedView"/>
          <template-type-parameter name="K"/>
        </template><parameter name="v"><paramtype>const OrientedView &amp;</paramtype></parameter><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter></function></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Circle_2_integrated_flux.h"><function name="Add1CirclePoints"><type>void</type><template>
          <template-type-parameter name="View"/>
        </template><parameter name="view"><paramtype>const View &amp;</paramtype></parameter><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><parameter name="dx"><paramtype>double</paramtype></parameter><parameter name="dy"><paramtype>double</paramtype></parameter><parameter name="d"><paramtype>double</paramtype></parameter><parameter name="res"><paramtype>double &amp;</paramtype></parameter><parameter name="w"><paramtype>double &amp;</paramtype></parameter></function><function name="Add4CirclePoints"><type>void</type><template>
          <template-type-parameter name="View"/>
        </template><parameter name="view"><paramtype>const View &amp;</paramtype></parameter><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><parameter name="d"><paramtype>double</paramtype></parameter><parameter name="res"><paramtype>double &amp;</paramtype></parameter><parameter name="w"><paramtype>double &amp;</paramtype></parameter></function><function name="Add8CirclePoints"><type>void</type><template>
          <template-type-parameter name="View"/>
        </template><parameter name="view"><paramtype>const View &amp;</paramtype></parameter><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><parameter name="dx"><paramtype>double</paramtype></parameter><parameter name="dy"><paramtype>double</paramtype></parameter><parameter name="res"><paramtype>double &amp;</paramtype></parameter><parameter name="w"><paramtype>double &amp;</paramtype></parameter></function><function name="integrated_flux"><type>double</type><template>
          <template-type-parameter name="OrientedView"/>
          <template-type-parameter name="K"/>
        </template><parameter name="v"><paramtype>const OrientedView &amp;</paramtype></parameter><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter></function></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Circle_2_intersection.h"><namespace name="geometry"><function name="do_intersect"><type>bool</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const Circle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="d"><paramtype>const Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="intersection_area"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c0"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="c1"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Circle_2_rectangle_2_intersection.h"><namespace name="geometry"><namespace name="Impl"><function name="circular_triangle_area"><type>double</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="x0"><paramtype>T</paramtype></parameter><parameter name="y0"><paramtype>T</paramtype></parameter><parameter name="x1"><paramtype>T</paramtype></parameter><parameter name="y1"><paramtype>T</paramtype></parameter><parameter name="R"><paramtype>T</paramtype></parameter></function><function name="intersection_area_rectangle_circle_aux"><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="area"><paramtype>T &amp;</paramtype></parameter><parameter name="out00"><paramtype>bool</paramtype></parameter><parameter name="out01"><paramtype>bool</paramtype></parameter><parameter name="out11"><paramtype>bool</paramtype></parameter><parameter name="out10"><paramtype>bool</paramtype></parameter><parameter name="x0"><paramtype>T</paramtype></parameter><parameter name="y0"><paramtype>T</paramtype></parameter><parameter name="x1"><paramtype>T</paramtype></parameter><parameter name="y1"><paramtype>T</paramtype></parameter><parameter name="rn"><paramtype>T</paramtype></parameter><parameter name="x02"><paramtype>T</paramtype></parameter><parameter name="y02"><paramtype>T</paramtype></parameter><parameter name="x12"><paramtype>T</paramtype></parameter><parameter name="y12"><paramtype>T</paramtype></parameter><parameter name="rn2"><paramtype>T</paramtype></parameter></function></namespace><function name="intersection_area"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="r"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="intersection_area"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="r"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="do_intersect"><type>bool</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="r"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="do_intersect"><type>bool</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="c"><paramtype>const geometry::Circle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="r"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/geometry.hpp"><namespace name="geometry"><struct name="Origin"/><class name="IO"><enum name="Mode"><enumvalue name="ASCII"><default> 0</default></enumvalue><enumvalue name="PRETTY"/><enumvalue name="BINARY"/></enum><data-member name="mode" specifiers="static"><type>int</type></data-member></class><struct name="Simple_cartesian"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="RT"><type>T</type></typedef><typedef name="FT"><type>T</type></typedef><typedef name="Point_2"><type>internal::Point_2&lt; T &gt;</type></typedef><typedef name="Vector_2"><type>internal::Vector_2&lt; T &gt;</type></typedef><typedef name="Segment_2"><type>internal::Segment_2&lt; T &gt;</type></typedef><typedef name="Line_2"><type>internal::Line_2&lt; T &gt;</type></typedef><typedef name="Iso_rectangle_2"><type>internal::Iso_rectangle_2&lt; T &gt;</type></typedef></struct><struct name="Iso_rectangle_2_traits"><template>
      <template-type-parameter name="K"/>
    </template><typedef name="type"><type>internal::Iso_rectangle_2&lt; typename K::RT &gt;</type></typedef></struct><namespace name="internal"><class name="Point_2"><template>
      <template-type-parameter name="T"/>
    </template><method-group name="public member functions"><method name="x" cv="const"><type>T</type></method><method name="y" cv="const"><type>T</type></method><method name="operator[]" cv="const"><type>T</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter></method><method name="operator-" cv="const"><type>Vector_2&lt; T &gt;</type><parameter name="p"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="operator+" cv="const"><type>Point_2</type><parameter name="v"><paramtype>const Vector_2&lt; T &gt; &amp;</paramtype></parameter></method><method name="operator-" cv="const"><type>Point_2</type><parameter name="v"><paramtype>const Vector_2&lt; T &gt; &amp;</paramtype></parameter></method><method name="operator-" cv="const"><type>Vector_2&lt; T &gt;</type><parameter name=""><paramtype>Origin</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="x"><paramtype>T</paramtype></parameter><parameter name="y"><paramtype>T</paramtype></parameter></constructor></class><class name="Vector_2"><template>
      <template-type-parameter name="T"/>
    </template><method-group name="public member functions"><method name="x" cv="const"><type>T</type></method><method name="y" cv="const"><type>T</type></method><method name="operator[]" cv="const"><type>T</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter></method><method name="perpendicular" cv="const"><type>Vector_2</type><parameter name="s"><paramtype>Sign</paramtype></parameter></method><method name="squared_length" cv="const"><type>T</type></method><method name="operator*" cv="const"><type>Vector_2</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name="u"><paramtype>U</paramtype></parameter></method><method name="operator*" cv="const"><type>T</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="operator+" cv="const"><type>Vector_2</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="operator-" cv="const"><type>Vector_2</type></method></method-group><constructor/><constructor><parameter name="x"><paramtype>T</paramtype></parameter><parameter name="y"><paramtype>T</paramtype></parameter></constructor></class><class name="Line_2"><template>
      <template-type-parameter name="T"/>
    </template><method-group name="public member functions"/><constructor><parameter name="a"><paramtype>T</paramtype></parameter><parameter name="b"><paramtype>T</paramtype></parameter><parameter name="c"><paramtype>T</paramtype></parameter></constructor></class><class name="Segment_2"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="R"><type>Simple_cartesian&lt; T &gt;</type></typedef><method-group name="public member functions"><method name="source" cv="const"><type>const Point_2&lt; T &gt; &amp;</type></method><method name="target" cv="const"><type>const Point_2&lt; T &gt; &amp;</type></method></method-group><constructor><parameter name="p"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter><parameter name="q"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter></constructor></class><class name="Iso_rectangle_2"><template>
      <template-type-parameter name="T"/>
    </template><method-group name="public member functions"><method name="min" cv="const"><type>const Point_2&lt; T &gt; &amp;</type></method><method name="max" cv="const"><type>const Point_2&lt; T &gt; &amp;</type></method><method name="vertex" cv="const"><type>const Point_2&lt; T &gt; &amp;</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="operator[]" cv="const"><type>const Point_2&lt; T &gt; &amp;</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="area" cv="const"><type>T</type></method><method name="is_degenerate" cv="const"><type>bool</type></method><method name="bounded_side" cv="const"><type>Bounded_side</type><parameter name="p"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter></method><method name="has_on_boundary" cv="const"><type>bool</type><parameter name="p"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter></method><method name="has_on_bounded_side" cv="const"><type>bool</type><parameter name="p"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter></method><method name="has_on_unbounded_side" cv="const"><type>bool</type><parameter name="p"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="p"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter><parameter name="q"><paramtype>const Point_2&lt; T &gt; &amp;</paramtype></parameter></constructor><constructor><parameter name="x0"><paramtype>T</paramtype></parameter><parameter name="y0"><paramtype>T</paramtype></parameter><parameter name="x1"><paramtype>T</paramtype></parameter><parameter name="y1"><paramtype>T</paramtype></parameter></constructor></class><function name="operator+"><type>Point_2&lt; T &gt;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>Origin</paramtype></parameter><parameter name="v"><paramtype>Vector_2&lt; T &gt; &amp;</paramtype></parameter></function></namespace><enum name="Orientation"><enumvalue name="CLOCKWISE"><default>-1</default></enumvalue><enumvalue name="DEGENERATE"><default>0</default></enumvalue><enumvalue name="COUNTERCLOCKWISE"><default>1</default></enumvalue></enum><enum name="Oriented_side"><enumvalue name="ON_NEGATIVE_SIDE"><default>-1</default></enumvalue><enumvalue name="ON_ORIENTED_BOUNDARY"><default>0</default></enumvalue><enumvalue name="ON_POSITIVE_SIDE"><default>1</default></enumvalue></enum><enum name="Bounded_side"><enumvalue name="ON_BOUNDED_SIDE"><default>-1</default></enumvalue><enumvalue name="ON_BOUNDARY"><default>0</default></enumvalue><enumvalue name="ON_UNBOUNDED_SIDE"><default>1</default></enumvalue></enum><enum name="Sign"><enumvalue name="NEGATIVE"><default>-1</default></enumvalue><enumvalue name="ZERO"><default>0</default></enumvalue><enumvalue name="POSITIVE"><default>1</default></enumvalue></enum><data-member name="ORIGIN"><type>Origin</type></data-member><function name="operator&gt;&gt;"><type>std::istream &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="is"><paramtype>std::istream &amp;</paramtype></parameter><parameter name="p"><paramtype>internal::Point_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="p"><paramtype>const internal::Point_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator&gt;&gt;"><type>std::istream &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="is"><paramtype>std::istream &amp;</paramtype></parameter><parameter name="v"><paramtype>internal::Vector_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator=="><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="u"><paramtype>const internal::Vector_2&lt; T &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const internal::Vector_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator=="><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="p"><paramtype>const internal::Point_2&lt; T &gt; &amp;</paramtype></parameter><parameter name="q"><paramtype>const internal::Point_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator=="><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="u"><paramtype>const internal::Iso_rectangle_2&lt; T &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const internal::Iso_rectangle_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="v"><paramtype>const internal::Vector_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="operator*"><type>internal::Vector_2&lt; U &gt;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="U"/>
        </template><parameter name="t"><paramtype>T</paramtype></parameter><parameter name="v"><paramtype>const internal::Vector_2&lt; U &gt; &amp;</paramtype></parameter></function><function name="midpoint"><type>internal::Point_2&lt; T &gt;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="p"><paramtype>const internal::Point_2&lt; T &gt; &amp;</paramtype></parameter><parameter name="q"><paramtype>const internal::Point_2&lt; T &gt; &amp;</paramtype></parameter></function><function name="is_zero"><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T</paramtype></parameter></function><function name="to_double"><type>double</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T</paramtype></parameter></function><function name="sign"><type>Sign</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T</paramtype></parameter></function><function name="min"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="x"><paramtype>T</paramtype></parameter><parameter name="y"><paramtype>T</paramtype></parameter></function><function name="max"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="x"><paramtype>T</paramtype></parameter><parameter name="y"><paramtype>T</paramtype></parameter></function><function name="abs"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="x"><paramtype>T</paramtype></parameter></function></namespace><data-member name="M_PI"><type>const double</type></data-member></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/image_error.h"/><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/integrated_flux.h"/><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/intersection.h"/><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Iso_rectangle_2_Segment_2_clip.h"><function name="clip"><type>bool</type><template>
          <template-type-parameter name="IsoRectangle"/>
          <template-type-parameter name="Segment"/>
        </template><parameter name="r"><paramtype>const IsoRectangle &amp;</paramtype></parameter><parameter name="s"><paramtype>Segment &amp;</paramtype></parameter></function></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2.h"><namespace name="geometry"><class name="Rectangle_2"><template>
      <template-type-parameter name="R_"/>
    </template><typedef name="R"><type>R_</type></typedef><typedef name="Point_2"><type>R_::Point_2</type></typedef><typedef name="Vector_2"><type>R_::Vector_2</type></typedef><typedef name="FT"><type>R_::FT</type></typedef><method-group name="public member functions"><method name="operator==" cv="const"><type>bool</type><parameter name="i"><paramtype>const Rectangle_2 &amp;</paramtype></parameter></method><method name="operator!=" cv="const"><type>bool</type><parameter name="i"><paramtype>const Rectangle_2 &amp;</paramtype></parameter></method><method name="center" cv=""><type>void</type><parameter name="p"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="normal" cv=""><type>void</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="ratio" cv=""><type>void</type><parameter name="f"><paramtype>FT</paramtype></parameter></method><method name="translate" cv=""><type>void</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="scale_and_rotate" cv=""><type>void</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="scale" cv=""><type>void</type><parameter name="f"><paramtype>const FT &amp;</paramtype></parameter></method><method name="reverse_orientation" cv=""><type>void</type></method><method name="rotate" cv="const"><type>Self</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="translated" cv="const"><type>Self</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="scaled_and_rotated" cv="const"><type>Self</type><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="opposite" cv="const"><type>Self</type></method><method name="reversed_orientation" cv="const"><type>Self</type></method><method name="scaled" cv="const"><type>Self</type><parameter name="f"><paramtype>const FT &amp;</paramtype></parameter></method><method name="scaled_center" cv="const"><type>Self</type><parameter name="i"><paramtype>int</paramtype></parameter><parameter name="f"><paramtype>const FT &amp;</paramtype></parameter></method><method name="scaled_edge" cv="const"><type>Self</type><parameter name="i"><paramtype>int</paramtype></parameter><parameter name="f"><paramtype>const FT &amp;</paramtype></parameter></method><method name="rotation_scaled_corner" cv="const"><type>Self</type><parameter name="i"><paramtype>int</paramtype></parameter><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter></method><method name="split" cv="const"><type>std::pair&lt; Self, Self &gt;</type><parameter name="i"><paramtype>int</paramtype></parameter><parameter name="f"><paramtype>const FT &amp;</paramtype><default>0.5</default></parameter></method><method name="merge" cv="const"><type>Self</type><parameter name="b"><paramtype>const Rectangle_2 &amp;</paramtype></parameter></method><method name="is_simple" cv="const"><type>bool</type></method><method name="is_convex" cv="const"><type>bool</type></method><method name="orientation" cv="const"><type>Orientation</type></method><method name="oriented_side" cv="const"><type>Oriented_side</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="bounded_side" cv="const"><type>Bounded_side</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="is_counterclockwise_oriented" cv="const"><type>bool</type></method><method name="is_clockwise_oriented" cv="const"><type>bool</type></method><method name="is_collinear_oriented" cv="const"><type>bool</type></method><method name="has_on_positive_side" cv="const"><type>bool</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="has_on_negative_side" cv="const"><type>bool</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="has_on_boundary" cv="const"><type>bool</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="has_on_bounded_side" cv="const"><type>bool</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="has_on_unbounded_side" cv="const"><type>bool</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="is_iso_rectangle" cv="const"><type>bool</type></method><method name="is_square" cv="const"><type>bool</type></method><method name="is_degenerate" cv="const"><type>bool</type></method><method name="bbox" cv="const"><type>Iso_rectangle_2</type></method><method name="scale" cv="const"><type>FT</type><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="scale_center" cv="const"><type>FT</type><parameter name="i"><paramtype>int</paramtype></parameter><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="scale_edge" cv="const"><type>FT</type><parameter name="i"><paramtype>int</paramtype></parameter><parameter name="q"><paramtype>const Point_2 &amp;</paramtype></parameter></method><method name="area" cv="const"><type>FT</type></method><method name="squared_perimeter" cv="const"><type>FT</type></method><method name="squared_length" cv="const"><type>FT</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="center" cv="const"><type>const Point_2 &amp;</type></method><method name="normal" cv="const"><type>const Vector_2 &amp;</type></method><method name="ratio" cv="const"><type>const FT &amp;</type></method><method name="left_vertex" cv="const"><type>int</type></method><method name="right_vertex" cv="const"><type>int</type></method><method name="bottom_vertex" cv="const"><type>int</type></method><method name="top_vertex" cv="const"><type>int</type></method><method name="point" cv="const"><type>Point_2</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="operator[]" cv="const"><type>Point_2</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="segment" cv="const"><type>Segment_2</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="line" cv="const"><type>Line_2</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="normal" cv="const"><type>Vector_2</type><parameter name="i"><paramtype>int</paramtype></parameter></method><method name="size" cv="const"><type>int</type></method><method name="is_empty" cv="const"><type>bool</type></method><method name="container" cv="const"><type>std::vector&lt; Point_2 &gt;</type><parameter name="force_ccw"><paramtype>bool</paramtype><default>false</default></parameter></method><method name="squared_cos" cv="const"><type>FT</type><parameter name="b"><paramtype>const Rectangle_2 &amp;</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="p"><paramtype>const Point_2 &amp;</paramtype></parameter><parameter name="v"><paramtype>const Vector_2 &amp;</paramtype></parameter><parameter name="f"><paramtype>const FT &amp;</paramtype></parameter></constructor><constructor><parameter name="p0"><paramtype>const Point_2 &amp;</paramtype></parameter><parameter name="p1"><paramtype>const Point_2 &amp;</paramtype></parameter><parameter name="p2"><paramtype>const Point_2 &amp;</paramtype></parameter></constructor><constructor><parameter name="s"><paramtype>const Segment_2 &amp;</paramtype></parameter></constructor><constructor><parameter name="pmin"><paramtype>const Point_2 &amp;</paramtype></parameter><parameter name="pmax"><paramtype>const Point_2 &amp;</paramtype></parameter></constructor></class><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="r"><paramtype>const Rectangle_2&lt; R &gt; &amp;</paramtype></parameter></function><function name="operator&gt;&gt;"><type>std::istream &amp;</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="is"><paramtype>std::istream &amp;</paramtype></parameter><parameter name="b"><paramtype>Rectangle_2&lt; R &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2_combination.h"><namespace name="geometry"><namespace name="Impl"><function name="collinear_orient"><type>void</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="b"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="p"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="q"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="min"><paramtype>typename K::Point_2 &amp;</paramtype></parameter><parameter name="max"><paramtype>typename K::Point_2 &amp;</paramtype></parameter></function><function name="branch"><type>void</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="b"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="c"><paramtype>typename K::Point_2 &amp;</paramtype></parameter><parameter name="d"><paramtype>typename K::Point_2 &amp;</paramtype></parameter><parameter name="e"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="f"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter></function><function name="iso_combination_area_aux"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="v"><paramtype>const typename K::Vector_2 &amp;</paramtype></parameter><parameter name="anbn"><paramtype>typename K::FT</paramtype></parameter><parameter name="an"><paramtype>const typename K::Vector_2 &amp;</paramtype></parameter><parameter name="ar"><paramtype>typename K::FT</paramtype></parameter><parameter name="bn"><paramtype>const typename K::Vector_2 &amp;</paramtype></parameter><parameter name="br"><paramtype>typename K::FT</paramtype></parameter></function></namespace><function name="combination"><type>std::vector&lt; typename K::Point_2 &gt;</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="combination_area"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2_image_error.h"><function name="image_error"><type>double</type><template>
          <template-type-parameter name="OrientedView"/>
          <template-type-parameter name="K"/>
        </template><parameter name=""><paramtype>const OrientedView &amp;</paramtype></parameter><parameter name=""><paramtype>const geometry::Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2_integrated_flux.h"><function name="integrated_flux"><type>double</type><template>
          <template-type-parameter name="K"/>
          <template-type-parameter name="OrientedView"/>
          <template-type-parameter name="Segment"/>
        </template><parameter name="v"><paramtype>const OrientedView &amp;</paramtype></parameter><parameter name="s0"><paramtype>const Segment &amp;</paramtype></parameter></function><function name="integrated_flux"><type>double</type><template>
          <template-type-parameter name="OrientedView"/>
          <template-type-parameter name="K"/>
        </template><parameter name="view"><paramtype>const OrientedView &amp;</paramtype></parameter><parameter name="r"><paramtype>const geometry::Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2_intersection.h"><namespace name="geometry"><namespace name="Impl"><function name="triangle_area"><type>FT</type><template>
          <template-type-parameter name="FT"/>
        </template><parameter name="n2"><paramtype>FT</paramtype></parameter><parameter name="m2"><paramtype>FT</paramtype></parameter><parameter name="tx"><paramtype>FT</paramtype></parameter><parameter name="ty"><paramtype>FT</paramtype></parameter><parameter name="rx"><paramtype>FT</paramtype></parameter><parameter name="ry"><paramtype>FT</paramtype></parameter></function><function name="intersection_area_two_slabs"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace><function name="intersection_area"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="do_intersect"><type>bool</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2_point_iterator.h"><namespace name="geometry"><class name="Rectangle_2_point_iterator"><template>
      <template-type-parameter name="Rect2"/>
    </template><method-group name="public member functions"><method name="operator++" cv=""><type>Rectangle_2_point_iterator</type><parameter name=""><paramtype>int</paramtype></parameter></method><method name="operator++" cv=""><type>Rectangle_2_point_iterator &amp;</type></method><method name="end" cv="const"><type>bool</type></method><method name="x" cv="const"><type>int</type></method><method name="y" cv="const"><type>int</type></method></method-group><constructor/><constructor><parameter name="rec"><paramtype>const Rectangle_2 &amp;</paramtype></parameter></constructor></class></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Rectangle_2_squared_distance.h"><namespace name="geometry"><function name="squared_distance"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="r"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="q"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter></function><function name="squared_distance"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="q"><paramtype>const typename K::Point_2 &amp;</paramtype></parameter><parameter name="r"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function><function name="squared_distance"><type>K::FT</type><template>
          <template-type-parameter name="K"/>
        </template><parameter name="a"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const Rectangle_2&lt; K &gt; &amp;</paramtype></parameter></function></namespace></header><header name="/home/olivier/work/dev/lib/librjmcmc/lib/geometry/Segment_2_iterator.h"><namespace name="geometry"><class name="Segment_2_iterator"><template>
      <template-type-parameter name="R_"/>
    </template><method-group name="public member functions"><method name="operator++" cv=""><type>Segment_2_iterator</type><parameter name=""><paramtype>int</paramtype></parameter></method><method name="operator++" cv=""><type>Segment_2_iterator &amp;</type></method><method name="end" cv="const"><type>bool</type></method><method name="begin" cv="const"><type>bool</type></method><method name="x" cv="const"><type>int</type></method><method name="y" cv="const"><type>int</type></method><method name="prev" cv="const"><type>FT</type></method><method name="next" cv="const"><type>FT</type></method><method name="length" cv="const"><type>FT</type></method><method name="axis" cv="const"><type>int</type></method><method name="step" cv="const"><type>int</type></method><method name="step" cv="const"><type>int</type><parameter name="k"><paramtype>int</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="s"><paramtype>const Segment_2 &amp;</paramtype></parameter></constructor></class></namespace></header></library-reference>
